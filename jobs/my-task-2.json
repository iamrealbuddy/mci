node {
    sh '''
        echo before...;pwd;ls -l
    '''
    deleteDir()
    waitUntil {
	    echo 'wait...'
        if (!fileExists('mci/')) {
		    echo 'mci not found...'
            return true
        }
    }
    sh '''
        echo after...;pwd;ls -l
    '''
    checkout scmGit(
        branches: [[name: 'main']],
        extensions: [[$class: 'RelativeTargetDirectory', 
            relativeTargetDir: 'mci']],
        userRemoteConfigs: [[url: 'https://github.com/iamrealbuddy/mci.git/']])
    waitUntil {
        fileExists('mci/scripts/track-task.sh')
    }
    sh '''
        pwd;ls -l
    '''
}

pipeline {
    agent any
    stages {
        stage('execute') {
            steps {
                echo 'Running task....';
                sh '''
                cd mci/scripts/
                chmod +x my-task.sh
                JENKINS_NODE_COOKIE=dontKillMe ./my-task.sh &
                echo $! > .pid
                '''
            }
        }
    }
}

node {
    parallel(
        script1: {
            while (true) {
                def exitCode = sh script: 'ps `cat mci/scripts/.pid`', returnStatus: true
                sleep 1
                if (exitCode != 0) {
                    echo "[node/parallel/Script1] Exit code is...$exitCode, PID not found, task has finished..."
                    return exitCode
                }
                else {
                    echo "[node/parallel/Script1] Exit code is...$exitCode, PID found, task is running..."
                }
            }
        },
        script2: {
            sh '''
            echo "[node/parallel/Script2] pwd is..."
            pwd
            '''
            for(i=1; i<21; i++) {
				echo "[node/parallel/Script2] dir list..."
                sh '''
                ls -la mci/scripts/
                '''
                if (!fileExists('mci/scripts/.done')) {
                    echo "[node/parallel/Script2] Done not present...."
                }
                else {
                    echo "[node/parallel/Script2] Done exists, task is done..."
                    return true
                }
                sleep 1
            }
        }
    )
}